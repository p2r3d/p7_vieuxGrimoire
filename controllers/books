// stocke toute la logique métier
const Book = require('../models/Book');
const fs = require('fs');

// POST : création d'un livre
exports.postBook = (req, res, next) => {

  console.log(' create book');
  // le formdata de la requête est transformé en json
    const bookObject = JSON.parse(req.body.book);

    // Suppression de l'id envoyé par le front
    delete bookObject._id;

    // Suppression de _userId du front
    delete bookObject._userId;
    
    // Création d'un nouveau livre
    const book = new Book({
        ...bookObject,
        userId: req.auth.userId,
        imageUrl: `${req.protocol}://${req.get('host')}/images/${req.file.filename}`
    });
    // Enregistrement dans la base de données
      console.log('avant save');

    book.save()
        .then(() => { res.status(201).json({ message: 'Livre enregistré !' }) })
        .catch(error => { res.status(400).json( { error }) })

};


// PUT : modification d'un livre sélectionné
exports.modifyBook = (req, res, next) => {
     const bookObject = req.file ? {
       ...JSON.parse(req.body.book),
       imageUrl: `${req.protocol}://${req.get('host')}/images/${req.file.filename}`
  } : { ...req.body };
 
   delete bookObject._userId;
   Book.findOne({_id: req.params.id})
       .then((book) => {
           if (book.userId != req.auth.userId) {
               res.status(401).json({ message : 'Not authorized'});
           } else {
               Book.updateOne({ _id: req.params.id}, { ...bookObject, _id: req.params.id})
               .then(() => res.status(200).json({message : 'Livre modifié!'}))
               .catch(error => res.status(401).json({ error }));
           }
       })
       .catch((error) => {
           res.status(400).json({ error });
       });
};

// DELETE
exports.deleteBook = (req, res, next) => {
   Book.findOne({ _id: req.params.id})
       .then(book => {
           if (book.userId != req.auth.userId) {
               res.status(401).json({message: 'Not authorized'});
           } else {
               const filename = book.imageUrl.split('/images/')[1];
               fs.unlink(`images/${filename}`, () => {
                   Book.deleteOne({_id: req.params.id})
                       .then(() => { res.status(200).json({message: 'Livre supprimé !'})})
                       .catch(error => res.status(401).json({ error }));
               });
           }
       })
       .catch( error => {
           res.status(500).json({ error });
       });
};
// GET : affichage d'un livre sélectionné
exports.getOneBook = (req, res, next) => {
  Book.findOne({ _id: req.params.id })
    .then((book) => { res.status(200).json(book); })
    .catch((error) => {res.status(404).json({error: error});});
};

// GET : affichade de tous les livres
exports.getAllBooks = (req, res, next) => {
  Book.find()
    .then((books) => {res.status(200).json(books);})
    .catch((error) => {res.status(400).json({error: error});});
};